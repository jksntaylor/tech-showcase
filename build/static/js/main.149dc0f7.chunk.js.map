{"version":3,"sources":["utils/Scroll.js","utils/Functions.ts","projects/FrictionText.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["scrollOptions","smooth","getSpeed","touchMultiplier","lerp","firefoxMultiplier","Scroll","useEffect","locomotiveScroll","LocomotiveScroll","el","document","querySelector","update","window","scroll","ScrollTrigger","scrollerProxy","scrollTop","value","arguments","length","scrollTo","instance","y","getBoundingClientRect","top","left","width","innerWidth","height","innerHeight","pinType","style","transform","addEventListener","refresh","destroy","hexToShaderRGB","hex","result","exec","THREE","parseInt","FrictionTextMaterial","shaderMaterial","uTime","uScrollDelta","uFrequency","uAmplitude","uSpeedMultiplier","uDirection","uBackColor","uFrontColor","extend","Wrapper","styled","section","props","background","CanvasWrapper","div","Cover","ScrollDown","p","FrictionTextWrapper","wrapper","useRef","scrollY","scrollDelta","scrubProgress","time","mat1","mat2","gsap","timeline","scrollTrigger","trigger","current","scroller","scrub","to","duration","ease","guiObject","frequency","amplitude","speedMultiplier","scrollMultiplier","vertical","textColor","FrictionText","filledText","gui","dat","add","min","max","step","onFinishChange","onChange","addColor","shaderRGB","backgroundColor","strokeColor","clock","useFrame","newScrollY","newScrollDelta","newTime","getElapsedTime","timeDelta","Math","abs","Text","ref","fontSize","letterSpacing","strokeWidth","rotation","PI","side","dpr","devicePixelRatio","main","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerPlugin","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.149dc0f7.chunk.js","sourcesContent":["import { useEffect } from 'react'\nimport LocomotiveScroll from \"locomotive-scroll\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\nconst scrollOptions = {\n  smooth: true,\n  getSpeed: true,\n  touchMultiplier: 2.5,\n  lerp: 0.1,\n  firefoxMultiplier: 100,\n};\n\nconst Scroll = () => {\n  useEffect(() => {\n    const locomotiveScroll = new LocomotiveScroll({\n      el: document.querySelector(\".smooth-scroll\"),\n      ...scrollOptions,\n    });\n    locomotiveScroll.update();\n    // Exposing to the global scope for ease of use.\n    window.scroll = locomotiveScroll;\n\n    ScrollTrigger.scrollerProxy(\".smooth-scroll\", {\n      scrollTop(value) {\n        return arguments.length\n          ? locomotiveScroll.scrollTo(value, 0, 0)\n          : locomotiveScroll.scroll.instance.scroll.y;\n      },\n      getBoundingClientRect() {\n        return {\n          top: 0,\n          left: 0,\n          width: window.innerWidth,\n          height: window.innerHeight,\n        };\n      },\n      //@ts-ignore\n      pinType: document.querySelector(\".smooth-scroll\").style.transform\n        ? \"transform\"\n        : \"fixed\",\n    });\n    ScrollTrigger.addEventListener(\"refresh\", () => locomotiveScroll.update());\n    ScrollTrigger.refresh();\n\n    return () => {\n      if (locomotiveScroll) locomotiveScroll.destroy();\n    };\n  }, []);\n\n  return null\n};\n\nexport default Scroll;\n","import * as THREE from 'three'\n\nexport const hexToShaderRGB = (hex: string) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? new THREE.Vector4(\n    parseInt(result[1], 16) / 255,\n    parseInt(result[2], 16) / 255,\n    parseInt(result[3], 16) / 255,\n    1.0\n  ) : new THREE.Vector4(0, 0, 0, 1)\n}\n","import React, { useEffect, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ReactThreeFiber, Canvas, extend, useFrame } from '@react-three/fiber'\nimport { shaderMaterial, Text } from '@react-three/drei'\nimport styled from 'styled-components'\nimport { lerp } from 'three/src/math/MathUtils'\nimport gsap from 'gsap'\nimport * as dat from 'dat.gui'\nimport { hexToShaderRGB } from '../utils/Functions'\n\nconst FrictionTextMaterial = shaderMaterial({\n  uTime: 0,\n  uScrollDelta: 0,\n  uFrequency: 6,\n  uAmplitude: 1,\n  uSpeedMultiplier: 1,\n  uDirection: 1,\n  uBackColor: new THREE.Vector4(0.0),\n  uFrontColor: new THREE.Vector4(1.0, 1.0, 1.0, 1.0)\n},\n`\n  #define PI 3.14159265\n  uniform float uTime;\n  uniform float uScrollDelta;\n  uniform float uFrequency;\n  uniform float uAmplitude;\n  uniform float uSpeedMultiplier;\n  uniform float uDirection;\n\n  void main() {\n    vec3 pos = position;\n    pos.x += uTime * uSpeedMultiplier;\n    pos.y = position.y + 0.239 + sin(pos.x * uFrequency) * uScrollDelta * uAmplitude;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  }\n`,`\n  uniform float uDirection;\n  uniform vec4 uBackColor;\n  uniform vec4 uFrontColor;\n\n  void main() {\n    if (uDirection == 0.0) gl_FragColor = uBackColor;\n    else gl_FragColor = uFrontColor;\n  }\n`)\n\ntype FrictionMaterial = {\n  uAmplitude: number;\n  uFrequency: number;\n  uScrollDelta: number;\n  uSpeedMultiplier: number;\n  uScrollMultiplier: number;\n  uTime: number;\n  uDirection: number;\n  side: THREE.Side;\n  uBackColor: THREE.Vector4;\n  uFrontColor: THREE.Vector4;\n}\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      frictionTextMaterial: ReactThreeFiber.Object3DNode<FrictionMaterial, typeof FrictionTextMaterial>\n    }\n  }\n}\n\nextend({ FrictionTextMaterial })\n\nconst FrictionTextWrapper: React.FC<{}> = () => {\n  // REFS\n  const wrapper = useRef<HTMLDivElement>(null)\n  const scrollY = useRef(0)\n  const scrollDelta = useRef(0)\n  const scrubProgress = useRef({ value: 0 })\n  const time = useRef(0)\n  const mat1 = useRef<FrictionMaterial>(null)\n  const mat2 = useRef<FrictionMaterial>(null)\n  // END REFS\n\n  // GSAP TIMELINE\n  useEffect(() => {\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: wrapper.current,\n        scroller: '.smooth-scroll',\n        scrub: 1.75\n      }\n    })\n    tl.to(scrubProgress.current, {\n      value: 100,\n      duration: 1,\n      ease: 'none'\n    })\n  }, [])\n  // END GSAP TIMELINE\n\n  const guiObject = useRef({\n    frequency: 1.75,\n    amplitude: 0.45,\n    speedMultiplier: 0.17,\n    scrollMultiplier: 28.7,\n    vertical: true,\n    background: '#020307',\n    textColor: '#FFFFFF'\n  })\n\n  const FrictionText: React.FC<{}> = () => {\n    const filledText = useRef()\n    // GUI\n    useEffect(() => {\n      const gui = new dat.GUI()\n      gui.add(guiObject.current, 'amplitude').min(0).max(5).step(0.01).onFinishChange(() => {\n        if (mat1.current && mat2.current) {\n          mat1.current.uAmplitude = guiObject.current.amplitude\n          mat2.current.uAmplitude = guiObject.current.amplitude\n        }\n      })\n      gui.add(guiObject.current, 'frequency').min(0).max(3).step(0.001).onFinishChange(() => {\n        if (mat1.current && mat2.current) {\n          mat1.current.uFrequency = guiObject.current.frequency\n          mat2.current.uFrequency = guiObject.current.frequency\n        }\n      })\n      gui.add(guiObject.current, 'speedMultiplier').min(0).max(3).step(0.001).onChange(() => {\n        if (mat1.current && mat2.current) {\n          mat1.current.uSpeedMultiplier = guiObject.current.speedMultiplier\n          mat2.current.uSpeedMultiplier = guiObject.current.speedMultiplier\n        }\n      })\n      gui.add(guiObject.current, 'scrollMultiplier').min(0).max(50).step(0.1)\n      // gui.add(guiObject.current, 'vertical').onChange(() => {\n      //   console.log('change')\n      // })\n      gui.addColor(guiObject.current, 'background').onChange(() => {\n        if (wrapper.current && mat1.current && mat2.current) {\n          let shaderRGB = hexToShaderRGB(guiObject.current.background)\n          wrapper.current.style.backgroundColor = guiObject.current.background\n          mat1.current.uBackColor = shaderRGB\n          mat2.current.uBackColor = shaderRGB\n        }\n      })\n      gui.addColor(guiObject.current, 'textColor').onChange(() => {\n        if (filledText.current && mat1.current && mat2.current) {\n          let shaderRGB = hexToShaderRGB(guiObject.current.textColor)\n          // @ts-ignore\n          filledText.current.strokeColor = guiObject.current.textColor\n          mat1.current.uFrontColor = shaderRGB\n          mat2.current.uFrontColor = shaderRGB\n        }\n      })\n    }, [])\n    // END GUI\n\n    const clock = new THREE.Clock()\n\n    useFrame(() => {\n      if (mat1.current && mat2.current) {\n        const newScrollY = scrubProgress.current.value\n        const newScrollDelta = lerp(scrollDelta.current, newScrollY - scrollY.current, 0.1)\n        scrollY.current = newScrollY\n        scrollDelta.current = newScrollDelta\n        mat1.current.uScrollDelta = scrollDelta.current\n        mat2.current.uScrollDelta = -scrollDelta.current\n\n        let newTime = clock.getElapsedTime()\n        let timeDelta = newTime - time.current\n        time.current = newTime\n        mat1.current.uTime += (timeDelta * Math.max(guiObject.current.speedMultiplier + Math.abs(newScrollDelta * guiObject.current.scrollMultiplier), 0))\n        mat2.current.uTime -= (timeDelta * Math.max(guiObject.current.speedMultiplier + Math.abs(newScrollDelta * guiObject.current.scrollMultiplier), 0))\n        mat1.current.uTime %= (4.35 / guiObject.current.speedMultiplier)\n        mat2.current.uTime %= (4.35 / guiObject.current.speedMultiplier)\n      }\n    })\n\n    return <>\n      <Text\n        ref={filledText}\n        fontSize={ 0.7 }\n        letterSpacing={ -0.07 }\n        strokeWidth='0.5%'\n        strokeColor={guiObject.current.textColor}\n        rotation={ new THREE.Euler(0, Math.PI, -Math.PI * 0.5) }\n      >FRICTION TEXT FRICTION TEXT FRICTION TEXT FRICTION TEXT\n        <frictionTextMaterial\n          ref={ mat1 }\n          uTime={ 0 }\n          uScrollDelta={ 0 }\n          uFrequency={ guiObject.current.frequency }\n          uAmplitude={ guiObject.current.amplitude }\n          uSpeedMultiplier={ guiObject.current.speedMultiplier }\n          uDirection={ 0 }\n          side={ THREE.BackSide }\n        />\n      </Text>\n      <Text\n        fontSize={ 0.7 }\n        letterSpacing={ -0.07 }\n        rotation={ new THREE.Euler(0, 0, -Math.PI * 0.5) }\n      >FRICTION TEXT FRICTION TEXT FRICTION TEXT FRICTION TEXT\n        <frictionTextMaterial\n          ref={ mat2 }\n          uTime={ 0 }\n          uScrollDelta={ 0 }\n          uFrequency={ guiObject.current.frequency }\n          uAmplitude={ guiObject.current.amplitude }\n          uSpeedMultiplier={ guiObject.current.speedMultiplier }\n          uDirection={ 1 }\n        />\n      </Text>\n    </>\n  }\n  return (\n    <>\n    <Wrapper ref={wrapper} background={guiObject.current.background}>\n      <CanvasWrapper>\n        <Canvas dpr={Math.min(2, window.devicePixelRatio)}>\n          <FrictionText />\n        </Canvas>\n      </CanvasWrapper>\n    </Wrapper>\n    <Cover />\n    <ScrollDown>Scroll Down!</ScrollDown>\n    </>\n  )\n\n}\n\nconst Wrapper = styled.section<{ background: string }>`\n  height: 200vw;\n  background-color: ${props => props.background};\n`\n\nconst CanvasWrapper = styled.div`\n  height: 200vw;\n  width: 100%;\n  position: fixed;\n  top: 0;\n`\n\nconst Cover = styled.div`\n  height: 90vw;\n  background: #e6e1cf;\n  position: relative;\n`\n\nconst ScrollDown = styled.p`\n  position: fixed;\n  top: 20px;\n  left: 50px;\n  color: white;\n  border: 1px solid white;\n  border-radius: 20px;\n  padding: 10px 20px;\n`\n\nexport default FrictionTextWrapper\n","import styled from 'styled-components'\nimport Scroll from './utils/Scroll';\n\nimport FrictionTextWrapper from './projects/FrictionText';\n\nimport './App.css';\n\nfunction App() {\n  return <>\n    <Scroll />\n    <Wrapper className=\"smooth-scroll\">\n      <FrictionTextWrapper/>\n    </Wrapper>\n  </>\n}\n\nconst Wrapper = styled.main`\n  background: #020307;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport gsap from 'gsap'\nimport ScrollTrigger from 'gsap/ScrollTrigger'\n\ngsap.registerPlugin(ScrollTrigger)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}